name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Run TypeScript type check
      run: npm run type-check
    
    - name: Run Prettier check
      run: npx prettier --check "**/*.{js,ts,tsx,json,md,yml,yaml}"
    
    # Initialize CodeQL for security analysis
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
    
    # Dependency vulnerability scanning
    - name: Run npm audit
      run: npm audit --audit-level=moderate
      continue-on-error: true

  # Unit and Integration Tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_DB: bmtc_transit_test
          POSTGRES_USER: bmtc_user
          POSTGRES_PASSWORD: bmtc_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Wait for services
      run: |
        timeout 60 bash -c 'until nc -z localhost 5432; do sleep 1; done'
        timeout 60 bash -c 'until nc -z localhost 6379; do sleep 1; done'
    
    - name: Run unit tests
      run: npm test
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://bmtc_user:bmtc_password@localhost:5432/bmtc_transit_test
        REDIS_URL: redis://localhost:6379
    
    - name: Run integration tests
      run: npm run test:integration
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://bmtc_user:bmtc_password@localhost:5432/bmtc_transit_test
        REDIS_URL: redis://localhost:6379
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/lcov.info
        fail_ci_if_error: false

  # Build Docker Images
  build:
    name: Build & Test Docker Images
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    
    strategy:
      matrix:
        service: [api-gateway, user-service, location-service, realtime-service]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and test Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./services/${{ matrix.service }}/Dockerfile
        platforms: linux/amd64
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm --entrypoint="" \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:${{ github.sha }} \
          node --version
    
    # Push to registry only on main branch or tags
    - name: Build and push Docker image
      if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./services/${{ matrix.service }}/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # End-to-End Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Start services with Docker Compose
      run: |
        docker-compose -f docker/docker-compose.dev.yml up -d
        sleep 30  # Wait for services to be ready
    
    - name: Wait for services
      run: |
        timeout 120 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'
    
    - name: Run E2E tests
      run: npm run test:e2e
      env:
        BASE_URL: http://localhost:3000
    
    - name: Stop services
      if: always()
      run: docker-compose -f docker/docker-compose.dev.yml down
    
    - name: Upload E2E test artifacts
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: e2e-test-results
        path: |
          e2e-tests/screenshots/
          e2e-tests/videos/
        retention-days: 7

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [code-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # Performance Testing
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Start services
      run: |
        docker-compose -f docker/docker-compose.dev.yml up -d
        sleep 30
    
    - name: Run performance tests
      run: |
        # Install k6 for load testing
        curl -s https://github.com/grafana/k6/releases/download/v0.47.0/k6-v0.47.0-linux-amd64.tar.gz | tar xvz --strip-components 1
        ./k6 run e2e-tests/performance/load-test.js
    
    - name: Stop services
      if: always()
      run: docker-compose -f docker/docker-compose.dev.yml down

  # Deployment to staging (only on main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, e2e-tests]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging environment
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "This would deploy to your staging environment"
        echo "For now, this is a placeholder - will be implemented with actual infrastructure"
    
    - name: Notify deployment
      run: |
        echo "‚úÖ Deployment to staging completed successfully"
        echo "Staging URL: https://staging.bmtc-app.com (placeholder)"

  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [code-quality, test, build, e2e-tests]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.code-quality.result == 'success' && needs.test.result == 'success' && needs.build.result == 'success' }}
      run: |
        echo "üéâ All CI checks passed successfully!"
        echo "‚úÖ Code quality checks passed"
        echo "‚úÖ All tests passed"
        echo "‚úÖ Docker builds successful"
    
    - name: Notify failure
      if: ${{ needs.code-quality.result == 'failure' || needs.test.result == 'failure' || needs.build.result == 'failure' }}
      run: |
        echo "‚ùå CI pipeline failed"
        echo "Code quality: ${{ needs.code-quality.result }}"
        echo "Tests: ${{ needs.test.result }}"
        echo "Build: ${{ needs.build.result }}"
        exit 1